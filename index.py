import sys

from nimblenet.activation_functions import sigmoid_function
from nimblenet.cost_functions import cross_entropy_cost
from nimblenet.learning_algorithms import RMSprop
from nimblenet.data_structures import Instance
from nimblenet.neuralnet import NeuralNet
dataset        = [ Instance([ 14105, 11 ], [ 1 ] ),
  Instance([ 125, 5 ], [ 1 ] ),
  Instance([ 26, 5 ], [ 1 ] ),
  Instance([ 14106, 36 ], [ 1 ] ),
  Instance([ 13716, 4 ], [ 1 ] ),
  Instance([ 40, 1 ], [ 1 ] ),
  Instance([ 3549, 4 ], [ 1 ] ),
  Instance([ 408, 29 ], [ 1 ] ),
  Instance([ 2, 2 ], [ 1 ] ),
  Instance([ 879, 29 ], [ 1 ] ),
  Instance([ 45, 1 ], [ 1 ] ),
  Instance([ 1609, 47 ], [ 1 ] ),
  Instance([ 14107, 2 ], [ 1 ] ),
  Instance([ 668, 6 ], [ 1 ] ),
  Instance([ 4755, 4 ], [ 1 ] ),
  Instance([ 101, 1 ], [ 1 ] ),
  Instance([ 14108, 24 ], [ 1 ] ),
  Instance([ 5, 5 ], [ 1 ] ),
  Instance([ 25, 4 ], [ 1 ] ),
  Instance([ 372, 24 ], [ 1 ] ),
  Instance([ 351, 35 ], [ 1 ] ),
  Instance([ 6859, 4 ], [ 1 ] ),
  Instance([ 159, 1 ], [ 1 ] ),
  Instance([ 62, 1 ], [ 1 ] ),
  Instance([ 6, 5 ], [ 1 ] ),
  Instance([ 11, 13 ], [ 1 ] ),
  Instance([ 29, 12 ], [ 1 ] ),
  Instance([ 534, 9 ], [ 1 ] ),
  Instance([ 1130, 4 ], [ 1 ] ),
  Instance([ 29, 6 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 18, 4 ], [ 1 ] ),
  Instance([ 408, 1 ], [ 1 ] ),
  Instance([ 215, 1 ], [ 1 ] ),
  Instance([ 367, 9 ], [ 1 ] ),
  Instance([ 13788, 1 ], [ 1 ] ),
  Instance([ 11, 8 ], [ 0 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 191, 5 ], [ 1 ] ),
  Instance([ 2100, 4 ], [ 1 ] ),
  Instance([ 372, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 24, 12 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 159, 1 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 14, 9 ], [ 0 ] ),
  Instance([ 125, 5 ], [ 1 ] ),
  Instance([ 125, 5 ], [ 0 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 6, 12 ], [ 1 ] ),
  Instance([ 322, 11 ], [ 1 ] ),
  Instance([ 244, 13 ], [ 1 ] ),
  Instance([ 11, 1 ], [ 1 ] ),
  Instance([ 168, 5 ], [ 1 ] ),
  Instance([ 14, 9 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2, 2 ], [ 1 ] ),
  Instance([ 1343, 9 ], [ 0 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 126, 10 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 69, 1 ], [ 1 ] ),
  Instance([ 372, 24 ], [ 1 ] ),
  Instance([ 367, 9 ], [ 1 ] ),
  Instance([ 18, 4 ], [ 1 ] ),
  Instance([ 34, 6 ], [ 1 ] ),
  Instance([ 18, 4 ], [ 1 ] ),
  Instance([ 26, 5 ], [ 1 ] ),
  Instance([ 125, 5 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 14, 9 ], [ 1 ] ),
  Instance([ 126, 10 ], [ 1 ] ),
  Instance([ 3175, 17 ], [ 0 ] ),
  Instance([ 241, 10 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 5, 5 ], [ 1 ] ),
  Instance([ 372, 24 ], [ 1 ] ),
  Instance([ 367, 9 ], [ 1 ] ),
  Instance([ 125, 5 ], [ 1 ] ),
  Instance([ 132, 6 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2377, 1 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 3291, 12 ], [ 0 ] ),
  Instance([ 168, 5 ], [ 1 ] ),
  Instance([ 220, 10 ], [ 1 ] ),
  Instance([ 372, 24 ], [ 1 ] ),
  Instance([ 372, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 40, 1 ], [ 1 ] ),
  Instance([ 154, 5 ], [ 1 ] ),
  Instance([ 13701, 2 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 96, 1 ], [ 1 ] ),
  Instance([ 27, 4 ], [ 0 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 372, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 6, 5 ], [ 1 ] ),
  Instance([ 367, 9 ], [ 1 ] ),
  Instance([ 367, 9 ], [ 1 ] ),
  Instance([ 367, 9 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 53, 8 ], [ 1 ] ),
  Instance([ 125, 5 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 367, 9 ], [ 1 ] ),
  Instance([ 367, 9 ], [ 1 ] ),
  Instance([ 101, 1 ], [ 1 ] ),
  Instance([ 8, 5 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 367, 9 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 367, 9 ], [ 1 ] ),
  Instance([ 372, 24 ], [ 1 ] ),
  Instance([ 5, 5 ], [ 1 ] ),
  Instance([ 372, 24 ], [ 1 ] ),
  Instance([ 26, 5 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 1316, 4 ], [ 1 ] ),
  Instance([ 159, 1 ], [ 1 ] ),
  Instance([ 367, 9 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 367, 9 ], [ 1 ] ),
  Instance([ 191, 5 ], [ 1 ] ),
  Instance([ 5, 5 ], [ 1 ] ),
  Instance([ 367, 9 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 367, 9 ], [ 1 ] ),
  Instance([ 367, 9 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 14109, 34 ], [ 1 ] ),
  Instance([ 40, 1 ], [ 1 ] ),
  Instance([ 2, 2 ], [ 1 ] ),
  Instance([ 392, 4 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 40, 1 ], [ 1 ] ),
  Instance([ 14110, 3 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 101, 1 ], [ 1 ] ),
  Instance([ 2462, 13 ], [ 1 ] ),
  Instance([ 3252, 4 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2507, 22 ], [ 1 ] ),
  Instance([ 372, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 992, 4 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 26, 5 ], [ 1 ] ),
  Instance([ 125, 5 ], [ 1 ] ),
  Instance([ 328, 27 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 172, 23 ], [ 1 ] ),
  Instance([ 372, 24 ], [ 1 ] ),
  Instance([ 2, 2 ], [ 1 ] ),
  Instance([ 367, 9 ], [ 1 ] ),
  Instance([ 7875, 6 ], [ 1 ] ),
  Instance([ 125, 5 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 526, 1 ], [ 1 ] ),
  Instance([ 367, 9 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 372, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 40, 1 ], [ 1 ] ),
  Instance([ 534, 9 ], [ 1 ] ),
  Instance([ 71, 4 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 20, 5 ], [ 1 ] ),
  Instance([ 367, 9 ], [ 1 ] ),
  Instance([ 2, 2 ], [ 1 ] ),
  Instance([ 416, 11 ], [ 1 ] ),
  Instance([ 75, 1 ], [ 1 ] ),
  Instance([ 2227, 4 ], [ 1 ] ),
  Instance([ 367, 9 ], [ 1 ] ),
  Instance([ 206, 1 ], [ 1 ] ),
  Instance([ 2004, 27 ], [ 1 ] ),
  Instance([ 220, 10 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 20, 5 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 36, 4 ], [ 1 ] ),
  Instance([ 1343, 9 ], [ 0 ] ),
  Instance([ 372, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 75, 1 ], [ 1 ] ),
  Instance([ 10838, 7 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 206, 1 ], [ 1 ] ),
  Instance([ 231, 23 ], [ 1 ] ),
  Instance([ 295, 40 ], [ 1 ] ),
  Instance([ 154, 5 ], [ 1 ] ),
  Instance([ 3299, 24 ], [ 1 ] ),
  Instance([ 179, 8 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 125, 5 ], [ 1 ] ),
  Instance([ 206, 1 ], [ 1 ] ),
  Instance([ 1174, 8 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 220, 10 ], [ 1 ] ),
  Instance([ 231, 23 ], [ 1 ] ),
  Instance([ 173, 5 ], [ 1 ] ),
  Instance([ 101, 1 ], [ 1 ] ),
  Instance([ 126, 10 ], [ 1 ] ),
  Instance([ 125, 5 ], [ 1 ] ),
  Instance([ 20, 5 ], [ 1 ] ),
  Instance([ 14025, 26 ], [ 1 ] ),
  Instance([ 40, 1 ], [ 1 ] ),
  Instance([ 160, 8 ], [ 1 ] ),
  Instance([ 3410, 10 ], [ 0 ] ),
  Instance([ 3175, 4 ], [ 0 ] ),
  Instance([ 404, 20 ], [ 1 ] ),
  Instance([ 13710, 11 ], [ 1 ] ),
  Instance([ 14, 9 ], [ 0 ] ),
  Instance([ 125, 5 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 14111, 2 ], [ 1 ] ),
  Instance([ 4447, 8 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2730, 8 ], [ 1 ] ),
  Instance([ 130, 8 ], [ 1 ] ),
  Instance([ 367, 9 ], [ 1 ] ),
  Instance([ 126, 10 ], [ 1 ] ),
  Instance([ 1375, 23 ], [ 1 ] ),
  Instance([ 109, 20 ], [ 1 ] ),
  Instance([ 14112, 24 ], [ 1 ] ),
  Instance([ 367, 9 ], [ 1 ] ),
  Instance([ 1581, 13 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 14, 9 ], [ 1 ] ),
  Instance([ 363, 4 ], [ 1 ] ),
  Instance([ 231, 23 ], [ 1 ] ),
  Instance([ 160, 8 ], [ 1 ] ),
  Instance([ 167, 22 ], [ 1 ] ),
  Instance([ 6, 5 ], [ 1 ] ),
  Instance([ 447, 8 ], [ 1 ] ),
  Instance([ 4447, 8 ], [ 0 ] ),
  Instance([ 2600, 24 ], [ 1 ] ),
  Instance([ 367, 9 ], [ 1 ] ),
  Instance([ 1648, 8 ], [ 1 ] )]
settings       = {
    "n_inputs" : 2,
    "layers"   : [  (2, sigmoid_function), (1, sigmoid_function) ]
}
network        = NeuralNet( settings )
training_set   = dataset
test_set       = dataset
cost_function  = cross_entropy_cost
RMSprop(
        network,           # the network to train
        training_set,      # specify the training set
        test_set,          # specify the test set
        cost_function,     # specify the cost function to calculate error
    )